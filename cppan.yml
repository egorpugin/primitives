local_settings:
    #build_dir_type: local
    #use_shared_libs: false
    rc_enabled: false
    builds:
        vs_release64:
            generator: Visual Studio 15 2017 Win64
        vs_release:
            generator: Visual Studio 15 2017
        vs_preview:
            c_compiler: c:/Program Files (x86)/Microsoft Visual Studio/Preview/Community/VC/Tools/MSVC/14.11.25325/bin/HostX64/x86/cl.exe
            cxx_compiler: c:/Program Files (x86)/Microsoft Visual Studio/Preview/Community/VC/Tools/MSVC/14.11.25325/bin/HostX64/x86/cl.exe
            cxx_flags: /std:c++17
        gcc8:
            c_compiler: gcc-8
            cxx_compiler: g++-8
            #generator: Ninja
        macos:
            c_compiler: clang
            cxx_compiler: clang++
        vs_llvm:
            toolset: LLVM-vs2014
        win_clang_ninja:
            generator: Ninja
            c_compiler: clang-cl
            cxx_compiler: clang-cl
            use_cache: false
root_project: pvt.egorpugin.primitives
common_settings:
    c++: 17
    create_default_api: true
    default_api_start: primitives
    options:
        any:
            compile_options:
                msvc:
                    public:
                        - /wd4251 # needs to have dll-interface to be used by clients of
                        #- /wd4275 # non dll-interface used as base for dll-interface
                        - /permissive-
                clang:
                    private:
                        -   -Wno-assume
                        -   -Wno-delete-non-virtual-dtor
                        -   -Wno-potentially-evaluated-expression
projects:
    command:
        name: command
        type: library
        root_directory: src/command
        options:
            any:
                definitions:
                    win32:
                        public:
                            -   _WIN32_WINNT=0x0601
        dependencies:
            public:
                file_monitor:
                    version: "*"
                templates:
                    version: "*"
                pvt.cppan.demo.boost.process:
                    version: 1

    context:
        name: context
        type: library

        root_directory: src/context

        dependencies:
            filesystem:
                version: "*"

    cron:
        name: cron
        type: library

        root_directory: src/cron
        dependencies:
            public:
                log:
                    version: "*"
                executor:
                    version: "*"

    db.common:
        type: library

        root_directory: src/db/common
        dependencies:
            public:
                filesystem:
                    version: "*"
                templates:
                    version: "*"
                pvt.cppan.demo.imageworks.pystring:
                    version: 1
    db.sqlite3:
        type: library

        root_directory: src/db/sqlite3
        dependencies:
            public:
                db.common:
                    version: "*"
                pvt.cppan.demo.sqlite3:
                    version: 3
    db.postgresql:
        type: library

        root_directory: src/db/postgresql
        dependencies:
            public:
                db.common:
                    version: "*"
                pvt.cppan.demo.jtv.pqxx:
                    version: "*"
    date_time:
        name: date_time
        type: library

        root_directory: src/date_time
        dependencies:
            public:
                pvt.cppan.demo.boost.date_time:
                    version: 1
                string:
                    version: "*"

    error_handling:
        name: error_handling
        type: library
        root_directory: src/error_handling

    executor:
        name: executor
        type: library

        root_directory: src/executor
        options:
            any:
                definitions:
                    win32:
                        private:
                            -   _WIN32_WINNT=0x0601
        dependencies:
            public:
                pvt.cppan.demo.boost.asio:
                    version: 1
                pvt.cppan.demo.boost.system:
                    version: 1
                templates:
                    version: "*"
    filesystem:
        name: filesystem
        type: library

        root_directory: src/filesystem
        options:
            any:
                link_libraries:
                    unix:
                        public:
                            - stdc++fs
        dependencies:
            public:
                string:
                    version: "*"
                templates:
                    version: "*"
                pvt.cppan.demo.boost.thread:
                    version: 1
                pvt.cppan.demo.boost.filesystem:
                    version: 1
                pvt.cppan.demo.grisumbras.enum_flags:
                    version: master

    file_monitor:
        name: file_monitor
        type: library

        root_directory: src/file_monitor
        dependencies:
            public:
                filesystem:
                    version: "*"
                pvt.cppan.demo.libuv:
                    version: 1
                #pvt.egorpugin.libuv:
                    #version: master

    hash:
        name: hash
        type: library

        root_directory: src/hash
        dependencies:
            public:
                filesystem:
                    version: "*"
                pvt.cppan.demo.aleksey14.rhash:
                    version: 1
                pvt.cppan.demo.openssl.crypto:
                    version: 1
    http:
        name: http
        type: library

        root_directory: src/http
        options:
            any:
                link_libraries:
                    win32:
                        public:
                            -   Winhttp
        dependencies:
            public:
                pvt.cppan.demo.badger.curl.libcurl:
                    version: 7
                filesystem:
                    version: "*"
                templates:
                    version: "*"
    lock:
        name: lock
        type: library
        root_directory: src/lock
        dependencies:
            public:
                filesystem:
                    version: "*"
                pvt.cppan.demo.boost.interprocess:
                    version: 1
    log:
        name: log
        type: library
        root_directory: src/log
        dependencies:
            public:
                pvt.cppan.demo.boost.log:
                    version: 1

    main:
        type: library
        static_only: true
        root_directory: src/main
        dependencies:
            public:
                error_handling:
                    version: "*"

    settings:
        type: library
        root_directory: src/settings

        dependencies:
            public:
                pvt.egorpugin.llvm.support_lite:
                    version: master
                templates:
                    version: "*"
                yaml:
                    version: "*"
                filesystem:
                    version: "*"
                pvt.cppan.demo.lexxmark.winflexbison.flex:
                    version: master
                    ref: flex
                    condition:
                        - WIN32
                pvt.cppan.demo.lexxmark.winflexbison.bison:
                    version: master
                    ref: bison
                    condition:
                        - WIN32

        post_target: |
            cppan_flex_bison_pair(LALR1_CPP_VARIANT_PARSER src/settings)
            cppan_flex_bison_pair(LALR1_CPP_VARIANT_PARSER src/path)
            target_sources(${this} PUBLIC ${SDIR}/src/settings.natvis)

    symbol:
        name: symbol
        type: library
        root_directory: src/symbol
        dependencies:
            public:
                filesystem:
                    version: "*"
                pvt.cppan.demo.boost.dll:
                    version: 1

    sw.main:
        type: library
        static_only: true
        root_directory: src/sw/main
        dependencies:
            public:
                sw.settings:
                    version: "*"
                    ref: sw_settings
                main:
                    version: "*"
                    ref: main

            private:
                pvt.cppan.demo.google.breakpad.client.windows.handler:
                    version: master
                pvt.cppan.demo.google.breakpad.client.windows.crash_generation.client:
                    version: master
                pvt.cppan.demo.google.breakpad.client.windows.crash_generation.server:
                    version: master
                pvt.cppan.demo.boost.dll:
                    version: 1

        post_target: |
            # try to fix link order for ld
            target_link_libraries(${this} INTERFACE $<TARGET_LINKER_FILE:${main}> $<TARGET_LINKER_FILE:${PACKAGE_STRING}> $<TARGET_LINKER_FILE:${sw_settings}>)

    sw.settings:
        type: library
        root_directory: src/sw/settings
        #exclude_from_build:
            #- src/sw.settings.program_name.cpp
        dependencies:
            public:
                settings:
                    version: "*"
        #post_target: |
            #target_sources(${this} INTERFACE ${SDIR}/src/sw.settings.program_name.cpp)


    pack:
        name: pack
        type: library
        root_directory: src/pack
        dependencies:
            public:
                filesystem:
                    version: "*"
                pvt.cppan.demo.libarchive.libarchive:
                    version: 3
                templates:
                    version: "*"

    patch:
        name: patch
        type: library
        root_directory: src/patch
        dependencies:
            public:
                filesystem:
                    version: "*"

    string:
        name: string
        type: library
        root_directory: src/string
        dependencies:
            public:
                pvt.cppan.demo.boost.algorithm:
                    version: 1
    templates:
        name: templates
        type: library
        static_only: true
        root_directory: src/templates

    version:
        name: version
        type: library
        root_directory: src/version

        dependencies:
            public:
                string:
                    version: "*"
                templates:
                    version: "*"
                pvt.cppan.demo.boost.container_hash:
                    version: 1
                pvt.cppan.demo.ragel:
                    version: 6
                pvt.cppan.demo.fmt:
                    version: "*"
                pvt.cppan.demo.lexxmark.winflexbison.flex:
                    version: master
                    ref: flex
                    condition:
                        - WIN32
                pvt.cppan.demo.lexxmark.winflexbison.bison:
                    version: master
                    ref: bison
                    condition:
                        - WIN32
                pvt.cppan.demo.imageworks.pystring:
                    version: 1
        post_sources: |
            gen_ragel(src/version.rl)

        post_target: |
            cppan_flex_bison_pair(GLR_CPP_PARSER src/range)
            target_sources(${this} PUBLIC ${SDIR}/src/version.natvis)


    win32helpers:
        name: win32helpers
        type: library
        root_directory: src/win32helpers
        options:
            any:
                definitions:
                    win32:
                        private:
                            -   UNICODE
        dependencies:
            public:
                filesystem:
                    version: "*"
                pvt.cppan.demo.boost.dll:
                    version: 1
                pvt.cppan.demo.boost.algorithm:
                    version: 1
    yaml:
        name: yaml
        type: library
        root_directory: src/yaml
        dependencies:
            public:
                pvt.cppan.demo.jbeder.yaml_cpp:
                    version: master
                string:
                    version: "*"
                templates:
                    version: "*"

    test.main:
        skip_on_server: true
        files:
            -   src/main.cpp
        options:
            any:
                compile_options:
                    msvc:
                        public:
                            - /bigobj
        dependencies:
            public:
                sw.main:
                    version: "*"
                command:
                    version: "*"
                context:
                    version: "*"
                date_time:
                    version: "*"
                executor:
                    version: "*"
                hash:
                    version: "*"
                http:
                    version: "*"
                yaml:
                    version: "*"
                pvt.cppan.demo.catchorg.catch2:
                    version: 2
                pvt.cppan.demo.nlohmann.json:
                    version: "*"
    test.db:
        skip_on_server: true
        files:
            -   src/db.cpp
        options:
            any:
                compile_options:
                    msvc:
                        public:
                            - /bigobj
        dependencies:
            public:
                sw.main:
                    version: "*"
                command:
                    version: "*"
                db.sqlite3:
                    version: "*"
                db.postgresql:
                    version: "*"
                date_time:
                    version: "*"
                executor:
                    version: "*"
                hash:
                    version: "*"
                yaml:
                    version: "*"
                pvt.cppan.demo.catchorg.catch2:
                    version: 2



    test.patch:
        skip_on_server: true
        files:
            -   src/patch.cpp
        dependencies:
            public:
                pvt.cppan.demo.catchorg.catch2:
                    version: 2

                patch:
                    version: "*"
                sw.main:
                    version: "*"

    test.settings:
        skip_on_server: true
        files:
            -   src/settings.cpp
        dependencies:
            public:
                pvt.cppan.demo.catchorg.catch2:
                    version: 2

                settings:
                    version: "*"
                sw.main:
                    version: "*"
    test.version:
        skip_on_server: true
        files:
            -   src/version.cpp
        options:
            any:
                compile_options:
                    msvc:
                        public:
                            - /bigobj
        dependencies:
            public:
                sw.main:
                    version: "*"
                pvt.cppan.demo.catchorg.catch2:
                    version: 2
                version:
                    version: "*"

    tools.embedder:
        files: src/tools/embedder.cpp
        dependencies:
            public:
                sw.main:
                    version: "*"
                filesystem:
                    version: "*"

        include_script: |
            macro(embed template)
                get_filename_component(n ${template} NAME_WE)
                get_filename_component(d ${template} DIRECTORY)
                set(output ${BDIR_PRIVATE}/${n}.cpp)
                add_custom_command(OUTPUT ${output}
                    COMMAND $<CPPAN_THIS_PACKAGE> ${template} ${output}
                    DEPENDS ${ARGN}
                    WORKING_DIRECTORY ${d}
                )
                set(src ${src} ${output} ${template} ${ARGN})
            endmacro()

    tools.syncqt:
        files: src/tools/syncqt.cpp
        dependencies:
            public:
                sw.main:
                    version: "*"
                filesystem:
                    version: "*"

        include_script: |
            macro(syncqt)
                foreach(module ${ARGN})
                    create_directory(${BDIR}/include/${module}/${PACKAGE_VERSION_MAJOR}.${PACKAGE_VERSION_MINOR}.${PACKAGE_VERSION_PATCH}/${module})
                    add_custom_command(OUTPUT ${BDIR}/include/${module}/${module}
                        COMMAND $<CPPAN_THIS_PACKAGE>
                            -s ${SDIR}
                            -b ${BDIR}
                            -m ${module}
                            -v ${PACKAGE_VERSION_MAJOR}.${PACKAGE_VERSION_MINOR}.${PACKAGE_VERSION_PATCH}
                    )
                    set(src ${src} ${BDIR}/include/${module}/${module})

                    target_include_directories(${this} PUBLIC
                        ${BDIR}/include
                        ${BDIR}/include/${module}
                        ${BDIR}/include/${module}/${PACKAGE_VERSION_MAJOR}.${PACKAGE_VERSION_MINOR}.${PACKAGE_VERSION_PATCH}
                        ${BDIR}/include/${module}/${PACKAGE_VERSION_MAJOR}.${PACKAGE_VERSION_MINOR}.${PACKAGE_VERSION_PATCH}/${module}
                    )
                endforeach()
            endmacro()

    tools.stamp_gen:
        files: src/tools/stamp_gen.cpp

    tools.sqlpp11.sqlite2cpp:
        files: src/tools/sqlpp11.sqlite2cpp.cpp

        dependencies:
            context:
                version: "*"
            sw.main:
                version: "*"
            pvt.cppan.demo.sqlite3: 3

        include_script: |
            macro(sqlite2cpp_gen_sql f out ns)
                get_filename_component(d ${f} DIRECTORY)
                set(o ${BDIR_PRIVATE}/${out})
                add_custom_command(OUTPUT ${o}
                    COMMAND $<CPPAN_THIS_PACKAGE> ${f} ${o} ${ns}
                    DEPENDS ${f}
                )
                set(src ${src} ${f} ${o})
            endmacro()



